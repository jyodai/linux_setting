#!/bin/bash

# 現在のディレクトリの基底名をプレフィックスとして使用
PREFIX=$(basename "$(pwd)")
# 永続的なデータ保存用のディレクトリを設定
DATA_DIR="$HOME/.local/share/${PREFIX}_git_helper"
GITHUB_PR_LIST_TEMP="${DATA_DIR}/gh_pr_list_temp"
GITHUB_PR_LIST="${DATA_DIR}/github_pr_list"

# データ保存ディレクトリが存在しない場合は作成
mkdir -p "$DATA_DIR"

help () {
    echo 'u       : プルリクエストをリモートより取得'
    echo 'd       : ローカルの「feature/*」ブランチ をすべて強制削除'
    echo 'c       : リモート最新のブランチ10件を取得する'
    echo 'r       : ローカルブランチをすべて削除後、プルリクエストを更新して最新のブランチを5件取得する'
    echo 'h       : Git履歴から過去のブランチを表示し、選択可能にする'
    echo '-- help : ヘルプを表示'
}

setPR() {
    local limit=${1:-30}

    gh pr list --state open --limit "$limit" > "$GITHUB_PR_LIST_TEMP"

    DIFF=$(comm --nocheck-order -12 <(sort "$GITHUB_PR_LIST_TEMP") <(sort "$GITHUB_PR_LIST"))
    if [[ "$DIFF" == "" ]]; then
        gh pr list --state open --limit 99 > "$GITHUB_PR_LIST"
    else
        cat "$GITHUB_PR_LIST" >> "$GITHUB_PR_LIST_TEMP"
        mv "$GITHUB_PR_LIST_TEMP" "$GITHUB_PR_LIST"

        removeDuplicatePR
    fi
}

removeDuplicatePR() {
    awk '!seen[substr($0,1,4)]++' "$GITHUB_PR_LIST" > "${GITHUB_PR_LIST}.tmp" && mv "${GITHUB_PR_LIST}.tmp" "$GITHUB_PR_LIST"
}

checkout() {
    setPR
    switchMain
    echo

    previous_branch=$(git rev-parse --abbrev-ref HEAD)

    branches=$(\
        git branch -r --sort=-authordate |\
        grep -Ev '^(  origin/)?(develop|master|main)$' |\
        grep -vE '^  origin/HEAD' |\
        head -n 10
    )

    for branch in $branches; do
        echo
        local_branch=$(echo $branch | sed 's#^origin/##')
        if git show-ref --quiet refs/heads/$local_branch; then
            echo "branch $local_branch already exists, skipping fetch"
        else
            echo "branch $local_branch does not exist, fetching"
            git checkout -b $local_branch $branch
        fi
    done

    git checkout $previous_branch
}

switchMain() {
    git checkout main
    git pull
}

allDelete() {
    git branch | grep feature | grep -v '\*' | xargs git branch -D
}

loadPullRequests() {
    if [[ -e "$GITHUB_PR_LIST" ]]; then
        pullRequests=$(cat "$GITHUB_PR_LIST")
    else
        pullRequests=""
    fi
}

displayBranches() {
    declare -A branchMap
    local branchIndex=0
    local IFS=$'\n'
    for branch in $(git branch); do
        local trimmedBranch=${branch// /}
        branchMap[$branchIndex]="$trimmedBranch"

        local description=''
        if [[ $trimmedBranch =~ (feature/.+) ]]; then
            local prNumber=${BASH_REMATCH[1]}
            description=$(getPRDescription "$prNumber")
        fi

        printBranch "$branchIndex" "$trimmedBranch" "$description"
        ((branchIndex++))
    done

    echo ''
    read -p 'Select #: ' selection
    processSelection "$selection" branchMap
}

getPRDescription() {
    local prNumber="$1"
    echo "$pullRequests" | grep "$prNumber" | head -n 1 | cut -f 2,4
}

printBranch() {
    local index="$1"
    local branch="$2"
    local description="$3"

    if [[ $branch = \** ]]; then
        echo -e "\033[38;5;13m$index: $branch    $description\033[0m"
    elif [[ $description = *"MERGED"* ]] || [[ $description = *"CLOSED"* ]]; then
        echo -e "\033[38;5;18m$index: $branch    $description\033[0m"
    else
        echo -e "$index: $branch    $description"
    fi
}

processSelection() {
    local selection="$1"
    declare -n map="$2"

    if [[ $selection == "clean" ]]; then
        git branch | grep 'feature/' | grep -v '\*' | xargs -r git branch -d
        exit 0
    elif [[ -n "${map[$selection]}" ]]; then
        git checkout "${map[$selection]}"
    else
        echo "Invalid selection."
    fi
}

selectList() {
    loadPullRequests
    displayBranches
}

checkGHCLI() {
    if ! [[ -x $(which gh) ]]; then
        echo "GitHub CLI (gh) is not installed or not in PATH."
        exit 1
    fi
}

printSeparator() {
    echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
}

updatePRs() {
    setPR
}

checkoutBranches() {
    echo 'Checkout remote branch to local branch'
    echo
    checkout
    printSeparator
}

deleteAllFeatureBranches() {
    echo 'Deleting all local feature/* branches'
    echo
    allDelete
    printSeparator
}

resetAndUpdate() {
    allDelete
    echo
    echo 'Resetting and updating pull requests, then checking out latest branches'
    echo
    setPR
    checkout
    printSeparator
}

displayHistory() {
    loadPullRequests
    
    # 'git reflog'の中で'checkout'操作のみをフィルタリングし、'from'と'to'のブランチ名を抽出
    local history=$(git reflog -n 20 --date=short | grep 'checkout' | head -n 10 | sed -E 's/.*from ([^ ]*) to ([^ ]*).*/\2/')
    local index=0
    local branchList=()

    # 履歴をリストに格納し、表示する
    while read -r branch; do
        if [[ -n "$branch" ]]; then
            branchList+=("$branch")
            
            local description=''
            if [[ $branch =~ (feature/.+) ]]; then
                local prNumber=${BASH_REMATCH[1]}
                description=$(getPRDescription "$prNumber")
            fi
            
            echo "$index: $branch    $description"
            ((index++))
        fi
    done <<< "$history"

    echo ''
    read -p 'Select history #: ' selection
    if [[ $selection =~ ^[0-9]+$ && $selection -ge 0 && $selection -lt ${#branchList[@]} ]]; then
        local branchName="${branchList[$selection]}"

        # 空でないブランチ名かどうか確認
        if [[ -z "$branchName" ]]; then
            echo "Error: Selected branch name is empty."
            return
        fi

        currentBranch=$(git rev-parse --abbrev-ref HEAD)

        # 現在のブランチと選択されたブランチが異なる場合のみ切り替え
        if [[ "$branchName" != "$currentBranch" ]]; then
            echo "Switching to branch '$branchName'..."
            git checkout "$branchName"
        else
            echo "Already on branch '$branchName'. No switch needed."
        fi
    else
        echo "Invalid selection."
    fi
}

executeOption() {
    case $1 in
        u) updatePRs ;;
        c) checkoutBranches ;;
        d) deleteAllFeatureBranches ;;
        r) resetAndUpdate ;;
        h) displayHistory ; exit 0 ;;
    esac
}

main() {
    checkGHCLI

    if [[ "$1" == "--help" ]]; then
        help
        exit 0
    fi

    while getopts 'ucdrh' OPT; do
        executeOption $OPT
    done

    selectList
}

main "$@"
