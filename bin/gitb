#!/bin/bash

# 現在のディレクトリの基底名をプレフィックスとして使用
PREFIX=$(basename "$(pwd)")
GITHUB_PR_LIST_TEMP="/tmp/${PREFIX}_gh_pr_list_temp"
GITHUB_PR_LIST="/tmp/${PREFIX}_github_pr_list"

help () {
    echo 'u  : プルリクエストをリモートより取得'
    echo 'd  : ローカルの「feature/*」ブランチ をすべて強制削除'
    echo 'c  : リモート最新のブランチ10件を取得する'
    echo 'r  : ローカルブランチをすべて削除後、プルリクエストを更新して最新のブランチを5件取得する'
}

setPR() {
    local limit=${1:-30}

    gh pr list --state all --limit "$limit" > "$GITHUB_PR_LIST_TEMP"

    DIFF=$(comm --nocheck-order -12 <(sort "$GITHUB_PR_LIST_TEMP") <(sort "$GITHUB_PR_LIST"))
    if [[ "$DIFF" == "" ]]; then
        gh pr list --state all --limit 99 > "$GITHUB_PR_LIST"
    else
        cat "$GITHUB_PR_LIST" >> "$GITHUB_PR_LIST_TEMP"
        mv "$GITHUB_PR_LIST_TEMP" "$GITHUB_PR_LIST"

        removeDuplicatePR
    fi
}

removeDuplicatePR() {
    awk '!seen[substr($0,1,4)]++' "$GITHUB_PR_LIST" > "${GITHUB_PR_LIST}.tmp" && mv "${GITHUB_PR_LIST}.tmp" "$GITHUB_PR_LIST"
}

checkout() {
    setPR
    switchMain
    echo

    previous_branch=$(git rev-parse --abbrev-ref HEAD)

    branches=$(\
        git branch -r --sort=-authordate |\
        grep -Ev '^(  origin\/)?(develop|master|main)$' |\
        grep -vE '^  origin\/HEAD' |\
        head -n 10
    )

    for branch in $branches; do
        echo
        local_branch=$(echo $branch | sed 's#^origin/##')
        if git show-ref --quiet refs/heads/$local_branch; then
            echo "branch $local_branch already exists, skipping fetch"
        else
            echo "branch $local_branch does not exist, fetching"
            git checkout -b $local_branch $branch
        fi
    done

    git checkout $previous_branch
}

switchMain() {
    git checkout main
    git pull
}

allDelete() {
    git branch | grep feature | grep -v '\*' | xargs git branch -D
}

selectList() {
    if [[ -e "$GITHUB_PR_LIST" ]]; then
        pullRequests=$(cat "$GITHUB_PR_LIST")
    fi

    echo
    declare -A branchMap
    branchIndex=0
    IFS=$'\n'
    for branch in $(git branch); do
        trimmedBranch=${branch// /}

        indexChar=$branchIndex
        if [ $branchIndex -gt 9 ] && [ $branchIndex -lt 123 ]; then
            asciiOffset=$(($branchIndex+87))
            indexChar=$(printf "\x$(printf %x $asciiOffset)")
        fi
        branchMap["$indexChar"]="$trimmedBranch"

        description=''
        if [[ ! -z "$pullRequests" ]] && [[ $trimmedBranch =~ (feature/.+) ]]; then
            prNumber=${BASH_REMATCH[1]}
            description="    "$(echo "$pullRequests" | grep "$prNumber" | head -n 1 | cut -f 2,4)
        fi

        if [[ $trimmedBranch = \** ]]; then
            echo -e "\033[38;5;13m$indexChar: $trimmedBranch$description\033[0m"
        elif [[ $description = *"MERGED"* ]] || [[ $description = *"CLOSED"* ]]; then
            echo -e "\033[38;5;18m$indexChar: $trimmedBranch$description\033[0m"
        else
            echo -e "$indexChar: $trimmedBranch$description"
        fi

        let branchIndex++
    done

    echo ''
    read -p 'Select #: ' selection
    if [ "$selection" == "clean" ]; then
        git branch | grep 'feature/' | grep -v '\*' | xargs -r git branch -d
        exit 0
    fi
    if [ -n "${branchMap[$selection]}" ]; then
        git checkout "${branchMap[$selection]}"
    fi
}

while getopts 'ucdrh' OPT; do
    case $OPT in
        "u" ) UPDATE="TRUE" ;;
        "c" ) CHECKOUT="TRUE" ;;
        "d" ) ALLDELETE="TRUE" ;;
        "r" ) RESET="TRUE" ;;
        "h" ) HELP="TRUE" ;;
        * ) help ;;
    esac
done

if [[ ! -z "$UPDATE" ]] && [[ -x $(which gh) ]]; then
    setPR
fi

if [[ ! -z "$CHECKOUT" ]] && [[ -x $(which gh) ]]; then
    echo 'Checkout remote branch to local branch'
    echo
    checkout
    echo
    echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
fi

if [[ ! -z "$ALLDELETE" ]] && [[ -x $(which gh) ]]; then
    echo 'Deleting all local feature/* branches'
    echo
    allDelete
    echo
    echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
fi

if [[ ! -z "$RESET" ]] && [[ -x $(which gh) ]]; then
    allDelete
    echo
    echo 'Resetting and updating pull requests, then checking out latest branches'
    echo
    setPR
    checkout
    echo
    echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
fi

if [[ ! -z "$HELP" ]] && [[ -x $(which gh) ]]; then
    help
    exit 0
fi

selectList
